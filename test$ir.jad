// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 

import java.util.ArrayList;
import org.irislang.jiris.compiler.IrisNativeJavaClass;
import org.irislang.jiris.compiler.IrisRunnable;
import org.irislang.jiris.core.*;
import org.irislang.jiris.dev.IrisDevUtil;

public class test$ir extends IrisNativeJavaClass
    implements IrisRunnable
{

    public IrisValue run(IrisContextEnvironment context, IrisThreadInfo threadInfo)
        throws Throwable
    {
        IrisValue resultValue = IrisDevUtil.Nil();
        resultValue = IrisDevUtil.CreateInt(1);
        threadInfo.setRecord(resultValue);
        resultValue = SetLocalVariable("a", threadInfo.getRecord(), threadInfo, context);
        threadInfo.setRecord(null);
        threadInfo;
        IrisValue resultValue = IrisDevUtil.CreateInt(1);
        threadInfo.AddParameter(resultValue);
        resultValue = GetLocalVariable("a", threadInfo, context);
        resultValue = CallMethod(resultValue, "+", threadInfo, context, 1);
        threadInfo.PopParameter(1);
        resultValue = SetLocalVariable("a", threadInfo.getRecord(), threadInfo, context);
        threadInfo.setRecord(null);
        threadInfo;
        threadInfo.setCounter(0);
        IrisValue resultValue = IrisDevUtil.CreateInt(0);
        threadInfo.PushLoopTime(resultValue);
        threadInfo.AddParameter(IrisDevUtil.CreateInt(0));
        resultValue = CallMethod(resultValue, ">", threadInfo, context, 1);
        threadInfo.PopParameter(1);
        if(resultValue == IrisDevUtil.True())
        {
            resultValue = SetLocalVariable("i", IrisDevUtil.CreateInt(0), threadInfo, context);
            do
            {
                resultValue = IrisDevUtil.CreateInt(10);
                threadInfo.AddParameter(resultValue);
                resultValue = GetLocalVariable("a", threadInfo, context);
                resultValue = CallMethod(resultValue, "<", threadInfo, context, 1);
                threadInfo.PopParameter(1);
                if(!IrisDevUtil.NotFalseOrNil(resultValue))
                    break;
                resultValue = threadInfo.GetTopLoopTime();
                if(!CompareCounterLess(threadInfo.getCounter(), resultValue))
                    break;
                threadInfo.increamCounter();
                resultValue = IrisDevUtil.CreateInt(threadInfo.getCounter());
                resultValue = SetLocalVariable("i", resultValue, threadInfo, context);
                resultValue = GetLocalVariable("i", threadInfo, context);
                threadInfo.AddParameter(resultValue);
                resultValue = IrisDevUtil.CreateString("\n");
                threadInfo.AddParameter(resultValue);
                resultValue = CallMethod(null, "print", threadInfo, context, 2);
                threadInfo.PopParameter(2);
            } while(true);
        } else
        {
            resultValue = SetLocalVariable("i", IrisDevUtil.CreateInt(0), threadInfo, context);
            do
            {
                resultValue = IrisDevUtil.CreateInt(10);
                threadInfo.AddParameter(resultValue);
                resultValue = GetLocalVariable("a", threadInfo, context);
                resultValue = CallMethod(resultValue, "<", threadInfo, context, 1);
                threadInfo.PopParameter(1);
                if(!IrisDevUtil.NotFalseOrNil(resultValue))
                    break;
                threadInfo.increamCounter();
                resultValue = IrisDevUtil.CreateInt(threadInfo.getCounter());
                resultValue = SetLocalVariable("i", resultValue, threadInfo, context);
                resultValue = GetLocalVariable("i", threadInfo, context);
                threadInfo.AddParameter(resultValue);
                resultValue = IrisDevUtil.CreateString("\n");
                threadInfo.AddParameter(resultValue);
                resultValue = CallMethod(null, "print", threadInfo, context, 2);
                threadInfo.PopParameter(2);
            } while(true);
        }
        threadInfo.PopLoopTime();
        return resultValue;
    }

    public static final ArrayList sm_uniqueStringObjects = new ArrayList();


    public test$ir()
    {
    }
}
