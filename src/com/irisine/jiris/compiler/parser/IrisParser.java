/* IrisParser.java */
/* Generated By:JavaCC: Do not edit this line. IrisParser.java */
package com.irisine.jiris.compiler.parser;

import com.irisine.jiris.compiler.*;
import com.irisine.jiris.compiler.assistpart.*;
import com.irisine.jiris.compiler.expression.*;
import com.irisine.jiris.compiler.statement.*;

import java.io.File;
import java.io.FileInputStream;

import java.util.LinkedList;

import org.apache.commons.lang3.StringEscapeUtils;;

public class IrisParser implements IrisParserConstants {

   public IrisParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

  final public void translation_unit() throws ParseException {IrisStatement tmpStatement = null;
    label_1:
    while (true) {
      tmpStatement = statement();
IrisCompiler.INSTANCE.AddStatement(tmpStatement);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCTION:
      case IF:
      case SELF:
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public IrisStatement statement() throws ParseException {IrisExpression tmpExpression = null;
  IrisStatement tmpStatement = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      tmpExpression = expression();
{if ("" != null) return new IrisNormalStatement(tmpExpression);}
      break;
      }
    case FUNCTION:
    case SELF:{
      tmpStatement = function_statement();
{if ("" != null) return tmpStatement;}
      break;
      }
    case IF:{
      tmpStatement = if_statement();
{if ("" != null) return tmpStatement;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisStatement function_statement() throws ParseException {IrisFunctionHeader tmpHeader = null;
  IrisBlock tmpBlock = null;
  IrisBlock tmpWithBlock = null;
  IrisBlock tmpWithoutBlock = null;
    tmpHeader = function_header();
    tmpBlock = function_block();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITH:{
      jj_consume_token(WITH);
      tmpWithBlock = with_block();
      jj_consume_token(WITHOUT);
      tmpWithoutBlock = function_block();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
{if ("" != null) return new IrisFunctionStatement(tmpHeader, tmpWithBlock, tmpWithoutBlock, tmpBlock);}
    throw new Error("Missing return statement in function");
  }

  final public IrisBlock function_block() throws ParseException {LinkedList<IrisStatement> statements = null;
    jj_consume_token(LC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      statements = function_involve_statement_list();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RC);
{if ("" != null) return new IrisBlock(statements);}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<IrisStatement> function_involve_statement_list() throws ParseException {IrisStatement tmpStatement = null;
  LinkedList<IrisStatement> statements = null;
statements = new LinkedList<IrisStatement>();
    label_2:
    while (true) {
      tmpStatement = function_involve_statement();
statements.add(tmpStatement);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
    }
{if ("" != null) return statements;}
    throw new Error("Missing return statement in function");
  }

  final public IrisStatement function_involve_statement() throws ParseException {IrisExpression tmpExpression = null;
  IrisStatement tmpStatement = null;
    if (jj_2_1(2)) {
      jj_consume_token(SEMICOLON);
      tmpExpression = expression();
{if ("" != null) return new IrisNormalStatement(tmpExpression);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        tmpStatement = return_statement();
{if ("" != null) return tmpStatement;}
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisBlock with_block() throws ParseException {LinkedList<IrisStatement> statements = null;
    if (jj_2_2(2)) {
      jj_consume_token(LC);
      jj_consume_token(RC);
{if ("" != null) return null;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LC:{
        jj_consume_token(LC);
        statements = with_involve_statement_list();
        jj_consume_token(RC);
{if ("" != null) return new IrisBlock(statements);}
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<IrisStatement> with_involve_statement_list() throws ParseException {IrisStatement tmpStatement = null;
  LinkedList<IrisStatement> statements = null;
statements = new LinkedList<IrisStatement>();
    label_3:
    while (true) {
      tmpStatement = with_involve_statement();
statements.add(tmpStatement);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
{if ("" != null) return statements;}
    throw new Error("Missing return statement in function");
  }

  final public IrisStatement with_involve_statement() throws ParseException {IrisExpression tmpExpression = null;
    jj_consume_token(SEMICOLON);
    tmpExpression = expression();
{if ("" != null) return new IrisNormalStatement(tmpExpression);}
    throw new Error("Missing return statement in function");
  }

  final public IrisFunctionHeader function_header() throws ParseException {IrisIdentifier tmpIdentifier = null;
        LinkedList<IrisIdentifier> tmpParameters = null;
        IrisIdentifier tmpVariableParameter = null;
        boolean isClassMethod = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELF:{
      jj_consume_token(SELF);
      jj_consume_token(DOT);
isClassMethod = true;
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(FUNCTION);
    tmpIdentifier = identifier();
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL:{
      jj_consume_token(MUL);
      tmpVariableParameter = identifier();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTANCE:
      case LOCALVARIABLE:
      case GLOBALVARIABLE:
      case INSTANCEVARIABLE:
      case CLASSVARIABLE:{
        tmpParameters = identifier_list();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        jj_consume_token(MUL);
        tmpVariableParameter = identifier();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    }
    jj_consume_token(RP);
{if ("" != null) return new IrisFunctionHeader(tmpIdentifier, tmpParameters, tmpVariableParameter, isClassMethod);}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<IrisIdentifier> identifier_list() throws ParseException {LinkedList<IrisIdentifier> identifiers = null;
  IrisIdentifier tmpIdentifier = null;
identifiers = new LinkedList<IrisIdentifier>();
    tmpIdentifier = identifier();
identifiers.add(tmpIdentifier);
    label_4:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(COMMA);
      tmpIdentifier = identifier();
identifiers.add(tmpIdentifier);
    }
{if ("" != null) return identifiers;}
    throw new Error("Missing return statement in function");
  }

  final public IrisStatement return_statement() throws ParseException {IrisExpression tmpExpression = null;
    jj_consume_token(SEMICOLON);
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case NIL:
    case LP:
    case LB:
    case LOGICAL_NOT:
    case ADD:
    case SUB:
    case BIT_NOT:
    case CONSTANCE:
    case LOCALVARIABLE:
    case GLOBALVARIABLE:
    case INSTANCEVARIABLE:
    case CLASSVARIABLE:
    case INTEGER:
    case FLOAT:
    case STRING:
    case UNIQUE_STRING:
    case RAW_STRING:{
      tmpExpression = expression();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
{if ("" != null) return new IrisReturnStatement(tmpExpression);}
    throw new Error("Missing return statement in function");
  }

  final public IrisStatement if_statement() throws ParseException {IrisStatement tmpStatement = null;
    if (jj_2_4(2147483647)) {
      tmpStatement = condition_if();
{if ("" != null) return tmpStatement;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        tmpStatement = loop_if();
{if ("" != null) return tmpStatement;}
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisStatement condition_if() throws ParseException {IrisExpression conditionExpr = null;
  IrisBlock block = null;
  LinkedList<IrisElseIf> elseIfList = null;
  IrisBlock elseBlock = null;
    jj_consume_token(IF);
    jj_consume_token(LP);
    conditionExpr = expression();
    jj_consume_token(RP);
    block = block();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSEIF:{
      elseIfList = elseif_list();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseBlock = block();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
{if ("" != null) return new IrisConditionIfStatement(conditionExpr, block, elseIfList, elseBlock);}
    throw new Error("Missing return statement in function");
  }

  final public IrisStatement loop_if() throws ParseException {IrisExpression conditionExpr = null;
  IrisExpression timeExpr = null;
  IrisIdentifier logVariable = null;
  IrisBlock block = null;
    jj_consume_token(IF);
    jj_consume_token(LP);
    conditionExpr = expression();
    jj_consume_token(COMMA);
    timeExpr = expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      logVariable = identifier();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    block = block();
{if ("" != null) return new IrisLoopIfStatement(conditionExpr, timeExpr, logVariable, block);}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<IrisElseIf> elseif_list() throws ParseException {LinkedList<IrisElseIf> elseIfList = null;
  IrisElseIf elseIfTmp = null;
elseIfList = new LinkedList<IrisElseIf>();
    label_5:
    while (true) {
      elseIfTmp = elseif();
elseIfList.add(elseIfTmp);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSEIF:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
    }
{if ("" != null) return elseIfList;}
    throw new Error("Missing return statement in function");
  }

  final public IrisElseIf elseif() throws ParseException {IrisElseIf result = null;
  IrisExpression tmpExpression = null;
  IrisBlock tmpBlock = null;
    jj_consume_token(ELSEIF);
    jj_consume_token(LP);
    tmpExpression = expression();
    jj_consume_token(RP);
    tmpBlock = block();
{if ("" != null) return new IrisElseIf(tmpExpression, tmpBlock);}
    throw new Error("Missing return statement in function");
  }

  final public IrisBlock block() throws ParseException {LinkedList<IrisStatement> statementList = null;
    jj_consume_token(LC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FUNCTION:
    case IF:
    case SELF:
    case SEMICOLON:{
      statementList = block_statement_list();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(RC);
{if ("" != null) return new IrisBlock(statementList);}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<IrisStatement> block_statement_list() throws ParseException {LinkedList<IrisStatement> statementList = null;
  IrisStatement tmpStatement = null;
statementList = new LinkedList<IrisStatement>();
    label_6:
    while (true) {
      tmpStatement = statement();
statementList.add(tmpStatement);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCTION:
      case IF:
      case SELF:
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
    }
{if ("" != null) return statementList;}
    throw new Error("Missing return statement in function");
  }

  final public IrisStatement switch_statement() throws ParseException {IrisExpression conditionExpression = null;
        IrisSwitchBlock tmpSwitchBody = null;
    jj_consume_token(SWITCH);
    jj_consume_token(LP);
    conditionExpression = expression();
    jj_consume_token(RP);
    tmpSwitchBody = switch_block();
{if ("" != null) return new IrisSwitchStatement(conditionExpression, tmpSwitchBody);}
    throw new Error("Missing return statement in function");
  }

  final public IrisSwitchBlock switch_block() throws ParseException {LinkedList<IrisWhen> whens = null;
  IrisWhen tmpWhen = null;
  IrisBlock elseBlock = null;
    jj_consume_token(LC);
whens = new LinkedList<IrisWhen>();
    label_7:
    while (true) {
      tmpWhen = when();
whens.add(tmpWhen);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHEN:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseBlock = block();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(RC);
{if ("" != null) return new IrisSwitchBlock(whens, elseBlock);}
    throw new Error("Missing return statement in function");
  }

  final public IrisWhen when() throws ParseException {IrisWhen tmpWhen = null;
        LinkedList<IrisExpression> tmpExpressionList = null;
        IrisBlock tmpBlock = null;
    jj_consume_token(WHEN);
    jj_consume_token(LP);
    tmpExpressionList = expression_list();
    jj_consume_token(RP);
    tmpBlock = block();
{if ("" != null) return new IrisWhen(tmpExpressionList, tmpBlock);}
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
  IrisBinaryExpression.BinaryExpressionType type = null;
    if (jj_2_5(2147483647)) {
      tmpLeftExpression = assign_oper_expression();
{if ("" != null) return tmpLeftExpression;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case NIL:
      case LP:
      case LB:
      case LOGICAL_NOT:
      case ADD:
      case SUB:
      case BIT_NOT:
      case CONSTANCE:
      case LOCALVARIABLE:
      case GLOBALVARIABLE:
      case INSTANCEVARIABLE:
      case CLASSVARIABLE:
      case INTEGER:
      case FLOAT:
      case STRING:
      case UNIQUE_STRING:
      case RAW_STRING:{
        tmpLeftExpression = logic_or_expression();
{if ("" != null) return tmpLeftExpression;}
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression assign_oper_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
  IrisBinaryExpression.BinaryExpressionType type = null;
  int lineNumber = 0;
    tmpLeftExpression = top_expression();
    type = assign_symbol();
    tmpRightExpression = expression();
lineNumber = tmpRightExpression.getLineNumber();
      tmpLeftExpression = new IrisBinaryExpression(type, tmpLeftExpression, tmpRightExpression);
      tmpLeftExpression.setLineNumber(lineNumber);
      {if ("" != null) return tmpLeftExpression;}
    throw new Error("Missing return statement in function");
  }

  final public IrisBinaryExpression.BinaryExpressionType assign_symbol() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.Assign;}
      break;
      }
    case ASSIGN_ADD:{
      jj_consume_token(ASSIGN_ADD);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignAdd;}
      break;
      }
    case ASSIGN_SUB:{
      jj_consume_token(ASSIGN_SUB);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignSub;}
      break;
      }
    case ASSIGN_MUL:{
      jj_consume_token(ASSIGN_MUL);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignMul;}
      break;
      }
    case ASSIGN_DIV:{
      jj_consume_token(ASSIGN_DIV);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignDiv;}
      break;
      }
    case ASSIGN_MOD:{
      jj_consume_token(ASSIGN_MOD);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignMod;}
      break;
      }
    case ASSIGN_BIT_AND:{
      jj_consume_token(ASSIGN_BIT_AND);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignBitAnd;}
      break;
      }
    case ASSIGN_BIT_OR:{
      jj_consume_token(ASSIGN_BIT_OR);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignBitOr;}
      break;
      }
    case ASSIGN_BIT_XOR:{
      jj_consume_token(ASSIGN_BIT_XOR);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignBitXor;}
      break;
      }
    case ASSIGN_BIT_SHR:{
      jj_consume_token(ASSIGN_BIT_SHR);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignBitShr;}
      break;
      }
    case ASSIGN_BIT_SHL:{
      jj_consume_token(ASSIGN_BIT_SHL);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignBitShl;}
      break;
      }
    case ASSIGN_BIT_SAR:{
      jj_consume_token(ASSIGN_BIT_SAR);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignBitSar;}
      break;
      }
    case ASSIGN_BIT_SAL:{
      jj_consume_token(ASSIGN_BIT_SAL);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.AssignBitSal;}
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression logic_or_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
    tmpLeftExpression = logic_and_expression();
    if (jj_2_6(2)) {
      jj_consume_token(LOGICAL_OR);
      tmpRightExpression = logic_or_expression();
    } else {
      ;
    }
if(tmpRightExpression == null) {
            {if ("" != null) return tmpLeftExpression;}
          } else {
            tmpLeftExpression = new IrisBinaryExpression(IrisBinaryExpression.BinaryExpressionType.LogicOr, tmpLeftExpression, tmpRightExpression);
            tmpLeftExpression.setLineNumber(tmpRightExpression.getLineNumber());
            {if ("" != null) return tmpLeftExpression;}
          }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression logic_and_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
    tmpLeftExpression = logic_bit_or_expression();
    if (jj_2_7(2)) {
      jj_consume_token(LOGICAL_AND);
      tmpRightExpression = logic_and_expression();
    } else {
      ;
    }
if(tmpRightExpression == null) {
            {if ("" != null) return tmpLeftExpression;}
          } else {
            tmpLeftExpression = new IrisBinaryExpression(IrisBinaryExpression.BinaryExpressionType.LogicAnd, tmpLeftExpression, tmpRightExpression);
            tmpLeftExpression.setLineNumber(tmpRightExpression.getLineNumber());
            {if ("" != null) return tmpLeftExpression;}
          }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression logic_bit_or_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
    tmpLeftExpression = logic_bit_xor_expression();
    if (jj_2_8(2)) {
      jj_consume_token(BIT_OR);
      tmpRightExpression = logic_bit_or_expression();
    } else {
      ;
    }
if(tmpRightExpression == null) {
            {if ("" != null) return tmpLeftExpression;}
          } else {
            tmpLeftExpression = new IrisBinaryExpression(IrisBinaryExpression.BinaryExpressionType.LogicBitOr, tmpLeftExpression, tmpRightExpression);
            tmpLeftExpression.setLineNumber(tmpRightExpression.getLineNumber());
            {if ("" != null) return tmpLeftExpression;}
          }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression logic_bit_xor_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
    tmpLeftExpression = logic_bit_and_expression();
    if (jj_2_9(2)) {
      jj_consume_token(BIT_XOR);
      tmpRightExpression = logic_bit_xor_expression();
    } else {
      ;
    }
if(tmpRightExpression == null) {
            {if ("" != null) return tmpLeftExpression;}
          } else {
            tmpLeftExpression = new IrisBinaryExpression(IrisBinaryExpression.BinaryExpressionType.LogicBitXor, tmpLeftExpression, tmpRightExpression);
            tmpLeftExpression.setLineNumber(tmpRightExpression.getLineNumber());
            {if ("" != null) return tmpLeftExpression;}
          }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression logic_bit_and_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
    tmpLeftExpression = logic_equal_compare_expression();
    if (jj_2_10(2)) {
      jj_consume_token(BIT_AND);
      tmpRightExpression = logic_bit_and_expression();
    } else {
      ;
    }
if(tmpRightExpression == null) {
            {if ("" != null) return tmpLeftExpression;}
          } else {
            tmpLeftExpression = new IrisBinaryExpression(IrisBinaryExpression.BinaryExpressionType.LogicBitAnd, tmpLeftExpression, tmpRightExpression);
            tmpLeftExpression.setLineNumber(tmpRightExpression.getLineNumber());
            {if ("" != null) return tmpLeftExpression;}
          }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression logic_equal_compare_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
  IrisBinaryExpression.BinaryExpressionType type = null;
    tmpLeftExpression = logic_not_equal_expression();
    if (jj_2_11(2)) {
      type = eq_ne();
      tmpRightExpression = logic_equal_compare_expression();
    } else {
      ;
    }
if(tmpRightExpression == null) {
            {if ("" != null) return tmpLeftExpression;}
          } else {
            tmpLeftExpression = new IrisBinaryExpression(type, tmpLeftExpression, tmpRightExpression);
            tmpLeftExpression.setLineNumber(tmpRightExpression.getLineNumber());
            {if ("" != null) return tmpLeftExpression;}
          }
    throw new Error("Missing return statement in function");
  }

  final public IrisBinaryExpression.BinaryExpressionType eq_ne() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:{
      jj_consume_token(EQ);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.Equal;}
      break;
      }
    case NE:{
      jj_consume_token(NE);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.NotEqual;}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression logic_not_equal_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
  IrisBinaryExpression.BinaryExpressionType type = null;
    tmpLeftExpression = logic_shift_expression();
    if (jj_2_12(2)) {
      type = gt_ge_lt_le();
      tmpRightExpression = logic_not_equal_expression();
    } else {
      ;
    }
if(tmpRightExpression == null) {
            {if ("" != null) return tmpLeftExpression;}
          } else {
            tmpLeftExpression = new IrisBinaryExpression(type, tmpLeftExpression, tmpRightExpression);
            tmpLeftExpression.setLineNumber(tmpRightExpression.getLineNumber());
            {if ("" != null) return tmpLeftExpression;}
          }
    throw new Error("Missing return statement in function");
  }

  final public IrisBinaryExpression.BinaryExpressionType gt_ge_lt_le() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GT:{
      jj_consume_token(GT);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.GreatThan;}
      break;
      }
    case GE:{
      jj_consume_token(GE);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.GreatThanOrEqual;}
      break;
      }
    case LT:{
      jj_consume_token(LT);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.LessThan;}
      break;
      }
    case LE:{
      jj_consume_token(LE);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.LessThanOrEqual;}
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression logic_shift_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
  IrisBinaryExpression.BinaryExpressionType type = null;
    tmpLeftExpression = add_sub_expression();
    if (jj_2_13(2)) {
      type = bitshr_bitshl_bitsar_bitshl();
      tmpRightExpression = logic_shift_expression();
    } else {
      ;
    }
if(tmpRightExpression == null) {
            {if ("" != null) return tmpLeftExpression;}
          } else {
            tmpLeftExpression = new IrisBinaryExpression(type, tmpLeftExpression, tmpRightExpression);
            tmpLeftExpression.setLineNumber(tmpRightExpression.getLineNumber());
            {if ("" != null) return tmpLeftExpression;}
          }
    throw new Error("Missing return statement in function");
  }

  final public IrisBinaryExpression.BinaryExpressionType bitshr_bitshl_bitsar_bitshl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BIT_SHR:{
      jj_consume_token(BIT_SHR);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.BitShr;}
      break;
      }
    case BIT_SHL:{
      jj_consume_token(BIT_SHL);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.BitShl;}
      break;
      }
    case BIT_SAR:{
      jj_consume_token(BIT_SAR);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.BitSar;}
      break;
      }
    case BIT_SAL:{
      jj_consume_token(BIT_SAL);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.BitSal;}
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression add_sub_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
  IrisBinaryExpression.BinaryExpressionType type = null;
    tmpLeftExpression = mul_div_mod_expression();
    if (jj_2_14(2)) {
      type = add_sub();
      tmpRightExpression = add_sub_expression();
    } else {
      ;
    }
if(tmpRightExpression == null) {
            {if ("" != null) return tmpLeftExpression;}
          } else {
            tmpLeftExpression = new IrisBinaryExpression(type, tmpLeftExpression, tmpRightExpression);
            tmpLeftExpression.setLineNumber(tmpRightExpression.getLineNumber());
            {if ("" != null) return tmpLeftExpression;}
          }
    throw new Error("Missing return statement in function");
  }

  final public IrisBinaryExpression.BinaryExpressionType add_sub() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:{
      jj_consume_token(ADD);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.Add;}
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.Sub;}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression mul_div_mod_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
  IrisBinaryExpression.BinaryExpressionType type = null;
    tmpLeftExpression = power_expression();
    if (jj_2_15(2)) {
      type = mul_div_mod();
      tmpRightExpression = mul_div_mod_expression();
    } else {
      ;
    }
if(tmpRightExpression == null) {
            {if ("" != null) return tmpLeftExpression;}
          } else {
            tmpLeftExpression = new IrisBinaryExpression(type, tmpLeftExpression, tmpRightExpression);
            tmpLeftExpression.setLineNumber(tmpRightExpression.getLineNumber());
            {if ("" != null) return tmpLeftExpression;}
          }
    throw new Error("Missing return statement in function");
  }

  final public IrisBinaryExpression.BinaryExpressionType mul_div_mod() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL:{
      jj_consume_token(MUL);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.Mul;}
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.Div;}
      break;
      }
    case MOD:{
      jj_consume_token(MOD);
{if ("" != null) return IrisBinaryExpression.BinaryExpressionType.Mod;}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression power_expression() throws ParseException {IrisExpression tmpLeftExpression = null;
  IrisExpression tmpRightExpression = null;
  int lineNumber = 0;
    tmpLeftExpression = unary_expression();
    if (jj_2_16(2)) {
      jj_consume_token(POWER);
      tmpRightExpression = power_expression();
    } else {
      ;
    }
if(tmpRightExpression == null) {
            {if ("" != null) return tmpLeftExpression;}
          } else {
            tmpLeftExpression = new IrisBinaryExpression(IrisBinaryExpression.BinaryExpressionType.Power, tmpLeftExpression, tmpRightExpression);
            tmpLeftExpression.setLineNumber(tmpRightExpression.getLineNumber());
            {if ("" != null) return tmpLeftExpression;}
          }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression unary_expression() throws ParseException {IrisExpression tmpExpression = null;
   int lineNumber = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case NIL:
    case LP:
    case LB:
    case CONSTANCE:
    case LOCALVARIABLE:
    case GLOBALVARIABLE:
    case INSTANCEVARIABLE:
    case CLASSVARIABLE:
    case INTEGER:
    case FLOAT:
    case STRING:
    case UNIQUE_STRING:
    case RAW_STRING:{
      tmpExpression = top_expression();
{if ("" != null) return tmpExpression;}
      break;
      }
    case LOGICAL_NOT:{
      jj_consume_token(LOGICAL_NOT);
      tmpExpression = unary_expression();
lineNumber = tmpExpression.getLineNumber();
    tmpExpression = new IrisUnaryExpression(IrisUnaryExpression.UnaryExpressionType.LogicNot, tmpExpression);
    tmpExpression.setLineNumber(lineNumber);
    {if ("" != null) return tmpExpression;}
      break;
      }
    case BIT_NOT:{
      jj_consume_token(BIT_NOT);
      tmpExpression = unary_expression();
lineNumber = tmpExpression.getLineNumber();
    tmpExpression = new IrisUnaryExpression(IrisUnaryExpression.UnaryExpressionType.BitNot, tmpExpression);
    tmpExpression.setLineNumber(lineNumber);
    {if ("" != null) return tmpExpression;}
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
      tmpExpression = unary_expression();
lineNumber = tmpExpression.getLineNumber();
    tmpExpression = new IrisUnaryExpression(IrisUnaryExpression.UnaryExpressionType.Minus, tmpExpression);
    tmpExpression.setLineNumber(lineNumber);
    {if ("" != null) return tmpExpression;}
      break;
      }
    case ADD:{
      jj_consume_token(ADD);
      tmpExpression = unary_expression();
lineNumber = tmpExpression.getLineNumber();
    tmpExpression = new IrisUnaryExpression(IrisUnaryExpression.UnaryExpressionType.Plus, tmpExpression);
    tmpExpression.setLineNumber(lineNumber);
    {if ("" != null) return tmpExpression;}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression top_expression() throws ParseException {IrisExpression tmpExpression = null;
    if (jj_2_17(2147483647)) {
      tmpExpression = hide_function_call();
{if ("" != null) return tmpExpression;}
    } else if (jj_2_18(2147483647)) {
      tmpExpression = index_expression();
{if ("" != null) return tmpExpression;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case NIL:
      case LP:
      case LB:
      case CONSTANCE:
      case LOCALVARIABLE:
      case GLOBALVARIABLE:
      case INSTANCEVARIABLE:
      case CLASSVARIABLE:
      case INTEGER:
      case FLOAT:
      case STRING:
      case UNIQUE_STRING:
      case RAW_STRING:{
        tmpExpression = primary_expression();
{if ("" != null) return tmpExpression;}
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression hide_function_call() throws ParseException {IrisIdentifier tmpIdentifier = null;
   LinkedList<IrisExpression> expressions = null;
   IrisExpression tmpExpression = null;
    tmpIdentifier = identifier();
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case NIL:
    case LP:
    case LB:
    case LOGICAL_NOT:
    case ADD:
    case SUB:
    case BIT_NOT:
    case CONSTANCE:
    case LOCALVARIABLE:
    case GLOBALVARIABLE:
    case INSTANCEVARIABLE:
    case CLASSVARIABLE:
    case INTEGER:
    case FLOAT:
    case STRING:
    case UNIQUE_STRING:
    case RAW_STRING:{
      expressions = expression_list();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(RP);
tmpExpression = new IrisFunctionCallExpression(null, tmpIdentifier, expressions, null);
    tmpExpression.setLineNumber(tmpIdentifier.getLineNumber());
    {if ("" != null) return tmpExpression;}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<IrisExpression> expression_list() throws ParseException {LinkedList<IrisExpression> expressions = null;
  IrisExpression tmpExpression = null;
expressions = new LinkedList<IrisExpression>();
    tmpExpression = expression();
expressions.add(tmpExpression);
    label_8:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(COMMA);
      tmpExpression = expression();
expressions.add(tmpExpression);
    }
{if ("" != null) return expressions;}
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression index_expression() throws ParseException {IrisExpression target = null;
  IrisExpression indexer = null;
    target = primary_expression();
    jj_consume_token(LB);
    indexer = expression();
    jj_consume_token(RB);
{if ("" != null) return new IrisIndexExpression(target, indexer);}
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression primary_expression() throws ParseException {IrisExpression tmpExpression = null;
  Token tmpToken = null;
  IrisIdentifier tmpIdentifier = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LP:{
      jj_consume_token(LP);
      tmpExpression = expression();
      jj_consume_token(RP);
{if ("" != null) return tmpExpression;}
      break;
      }
    case CONSTANCE:
    case LOCALVARIABLE:
    case GLOBALVARIABLE:
    case INSTANCEVARIABLE:
    case CLASSVARIABLE:{
      tmpIdentifier = identifier();
tmpExpression = new IrisIdentifierExpression(tmpIdentifier);
    tmpExpression.setLineNumber(tmpIdentifier.getLineNumber());
    {if ("" != null) return tmpExpression;}
      break;
      }
    case INTEGER:{
      tmpToken = jj_consume_token(INTEGER);
{if ("" != null) return (IrisNativeObjectExpression)(((IrisToken)tmpToken).getSyntaxUnit());}
      break;
      }
    case FLOAT:{
      tmpToken = jj_consume_token(FLOAT);
{if ("" != null) return (IrisNativeObjectExpression)(((IrisToken)tmpToken).getSyntaxUnit());}
      break;
      }
    case STRING:
    case UNIQUE_STRING:
    case RAW_STRING:{
      tmpExpression = string();
{if ("" != null) return tmpExpression;}
      break;
      }
    case TRUE:{
      tmpToken = jj_consume_token(TRUE);
tmpExpression = new IrisInstantValueExpression(IrisInstantValueExpression.InstantValueType.True);
    tmpExpression.setLineNumber(tmpToken.beginLine);
    {if ("" != null) return tmpExpression;}
      break;
      }
    case FALSE:{
      tmpToken = jj_consume_token(FALSE);
tmpExpression = new IrisInstantValueExpression(IrisInstantValueExpression.InstantValueType.False);
    tmpExpression.setLineNumber(tmpToken.beginLine);
    {if ("" != null) return tmpExpression;}
      break;
      }
    case NIL:{
      tmpToken = jj_consume_token(NIL);
tmpExpression = new IrisInstantValueExpression(IrisInstantValueExpression.InstantValueType.Nil);
    tmpExpression.setLineNumber(tmpToken.beginLine);
    {if ("" != null) return tmpExpression;}
      break;
      }
    case LB:{
      tmpExpression = array_literal();
{if ("" != null) return tmpExpression;}
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisIdentifier identifier() throws ParseException {Token tmpToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONSTANCE:{
      tmpToken = jj_consume_token(CONSTANCE);
{if ("" != null) return (IrisIdentifier)(((IrisToken)tmpToken).getSyntaxUnit());}
      break;
      }
    case CLASSVARIABLE:{
      tmpToken = jj_consume_token(CLASSVARIABLE);
{if ("" != null) return (IrisIdentifier)(((IrisToken)tmpToken).getSyntaxUnit());}
      break;
      }
    case LOCALVARIABLE:{
      tmpToken = jj_consume_token(LOCALVARIABLE);
{if ("" != null) return (IrisIdentifier)(((IrisToken)tmpToken).getSyntaxUnit());}
      break;
      }
    case INSTANCEVARIABLE:{
      tmpToken = jj_consume_token(INSTANCEVARIABLE);
{if ("" != null) return (IrisIdentifier)(((IrisToken)tmpToken).getSyntaxUnit());}
      break;
      }
    case GLOBALVARIABLE:{
      tmpToken = jj_consume_token(GLOBALVARIABLE);
{if ("" != null) return (IrisIdentifier)(((IrisToken)tmpToken).getSyntaxUnit());}
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisNativeObjectExpression string() throws ParseException {Token tmpToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      tmpToken = jj_consume_token(STRING);
{if ("" != null) return (IrisNativeObjectExpression)(((IrisToken)tmpToken).getSyntaxUnit());}
      break;
      }
    case UNIQUE_STRING:{
      tmpToken = jj_consume_token(UNIQUE_STRING);
{if ("" != null) return (IrisNativeObjectExpression)(((IrisToken)tmpToken).getSyntaxUnit());}
      break;
      }
    case RAW_STRING:{
      tmpToken = jj_consume_token(RAW_STRING);
{if ("" != null) return (IrisNativeObjectExpression)(((IrisToken)tmpToken).getSyntaxUnit());}
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IrisExpression array_literal() throws ParseException {LinkedList<IrisExpression> expressions = null;
    jj_consume_token(LB);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case NIL:
    case LP:
    case LB:
    case LOGICAL_NOT:
    case ADD:
    case SUB:
    case BIT_NOT:
    case CONSTANCE:
    case LOCALVARIABLE:
    case GLOBALVARIABLE:
    case INSTANCEVARIABLE:
    case CLASSVARIABLE:
    case INTEGER:
    case FLOAT:
    case STRING:
    case UNIQUE_STRING:
    case RAW_STRING:{
      expressions = expression_list();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(RB);
{if ("" != null) return new IrisArrayExpression(expressions);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_119()) return true;
    if (jj_scan_token(WITHOUT)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_3R_110()) return true;
    if (jj_3R_111()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(RAW_STRING)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(UNIQUE_STRING)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(GLOBALVARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(INSTANCEVARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(LOCALVARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(CLASSVARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(CONSTANCE)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(LOGICAL_AND)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(LOGICAL_OR)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(ASSIGN_BIT_SAL)) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(ASSIGN_BIT_SAR)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(ASSIGN_BIT_SHL)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(ASSIGN_BIT_SHR)) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(ASSIGN_BIT_XOR)) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(ASSIGN_BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(ASSIGN_BIT_AND)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(ASSIGN_MOD)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(ASSIGN_DIV)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(ASSIGN_MUL)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(ASSIGN_SUB)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(ASSIGN_ADD)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_60()) return true;
    if (jj_scan_token(LB)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RB)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(BIT_NOT)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(LOGICAL_NOT)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    Token xsp;
    if (jj_3R_98()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(POWER)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(LC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    if (jj_scan_token(RC)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_62()
 {
    Token xsp;
    if (jj_3R_95()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(BIT_SAL)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(BIT_SAR)) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(BIT_SHL)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(BIT_SHR)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_3R_10()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(SELF)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(LP)) return true;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_128()
 {
    Token xsp;
    if (jj_3R_130()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(LC)) return true;
    if (jj_3R_128()) return true;
    if (jj_scan_token(RC)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(LC)) return true;
    if (jj_scan_token(RC)) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    Token xsp;
    if (jj_3R_127()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_127()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_scan_token(LC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    if (jj_scan_token(RC)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_84()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(BIT_XOR)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(LB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    if (jj_scan_token(RB)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public IrisParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000800,0x1000800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x4000000,0x2000000,0x0,0x4000000,0x1000800,0x1000800,0x40000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000040,0x8000040,0x80,0x8000000,0x8000000,0x8000000,0x800000,0x8000000,0x40,0x0,0x10000000,0x0,0x8220e000,0x0,0x0,0x0,0x10000000,0x0,0x8000040,0x8000040,0x0,0x0,0x8220e000,0x0,0x0,0x0,0x0,0x0,0x0,0x8220e000,0x220e000,0x8220e000,0x220e000,0x0,0x0,0x10000000,0x8220e000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x10180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10180,0xe1fe0001,0x6,0x78,0x1e000000,0x180,0xe00,0x10180,0x0,0x10180,0x0,0x0,0x0,0x0,0x10180,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e0,0x0,0x0,0x430883e0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x430883e0,0x1,0x0,0x0,0x0,0x0,0x0,0x430883e0,0x430883e0,0x430883e0,0x430883e0,0x3e0,0x43000000,0x0,0x430883e0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[19];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public IrisParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public IrisParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IrisParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public IrisParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IrisParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public IrisParser(IrisParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(IrisParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[127];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 127; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
